{
  "rss": {
    "xmlns:dc": "http://purl.org/dc/elements/1.1/",
    "xmlns:content": "http://purl.org/rss/1.0/modules/content/",
    "xmlns:atom": "http://www.w3.org/2005/Atom",
    "version": "2.0",
    "xmlns:cc": "http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html",
    "channel": {
      "title": "DailyJS - Medium",
      "description": "JavaScript news and opinion. - Medium",
      "link": "https://medium.com/dailyjs?source=rss----f5105b08f43a---4",
      "image": {
        "url": "https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png",
        "title": "DailyJS - Medium",
        "link": "https://medium.com/dailyjs?source=rss----f5105b08f43a---4"
      },
      "generator": "Medium",
      "lastBuildDate": "Thu, 07 Feb 2019 12:26:24 GMT",
      "atom:link": [
        {
          "href": "https://medium.com/feed/dailyjs",
          "rel": "self",
          "type": "application/rss+xml"
        },
        {
          "href": "http://medium.superfeedr.com",
          "rel": "hub"
        }
      ],
      "webMaster": "yourfriends@medium.com",
      "item": [
        {
          "title": "What is actually CSS-in-JS?",
          "link": "https://medium.com/dailyjs/what-is-actually-css-in-js-f2f529a2757?source=rss----f5105b08f43a---4",
          "guid": {
            "isPermaLink": "false",
            "$t": "https://medium.com/p/f2f529a2757"
          },
          "category": [
            "css",
            "web-development",
            "html"
          ],
          "dc:creator": "Oleg Isonen",
          "pubDate": "Mon, 28 Jan 2019 16:15:20 GMT",
          "atom:updated": "2019-02-01T10:50:08.960Z",
          "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*9xQFDp3YBXReqtgt\" /><figcaption>Photo by <a href=\"https://unsplash.com/photos/v2HgNzRDfII?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Bruno van der Kraan</a></figcaption></figure><h3>What actually is CSS-in-JS?</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><p>CSS-in-JS refers to a collection of ideas to solve complex problems with CSS. Since it is NOT a particular library, different libs might solve a different subset of problems and use different approaches, depending on their implementation details.</p><p>However, all implementations have in common that they tackle the problems using APIs instead of convention and they leverage JavaScript as a language.</p><h3>Lack of modules</h3><p>CSS historically never had actual modules, neither did JavaScript. Requirements for web applications evolved and JavaScript has added a module system. First in the form of a bolt-on solution (CommonJS), later as a standard, statically analyzable module system known as ECMAScript Modules (ESM).</p><p>The reasoning behind modules applies to both JavaScript and CSS: to be able to hide implementation details by exposing only public APIs. We need to be able to decouple subsystems of an application explicitly so that changing code becomes more predictable.</p><p>Not every application needs this, but it makes maintaining medium and large applications easier, simplifying modification and deletion of internal implementation details. Problems appear with more complexity, the smaller the application the less complexity it usually contains.</p><blockquote>CSS-in-JS relies on JavaScript’s modules implementation.</blockquote><h3>Lack of scoping</h3><p>We know CSS always had a single global namespace, for example, a class can be added to any element, a tag selector can target any element in the document. CSS was initially created to style documents and there was no need for components. The entire page was styled as one big chunk and it usually didn’t involve many people working on it. Since then the complexity of many sites has dramatically increased and this is the main reason why many CSS methodologies were created. None of the conventions is easy to establish and consistently enforce when many people contribute to a project over the years.</p><p>Modern websites are complex enough to need many front-end specialists working in separate areas of the site. Those parts are reused across the global site in different ways requiring those blocks to be fully interactive and functional.</p><p>The consequence of not having a consistent scoping — styles leaking in an unpredictable manner.</p><p>Here is a <strong>simplified</strong> example of how CSS-in-JS libraries generate a selector:</p><pre>const css = styleBlock =&gt; {<br>  const className = someHash(styleBlock);<br>  const styleEl = document.createElement(&#39;style&#39;);<br>  styleEl.textContent = `<br>    .${className} {<br>      ${styleBlock}<br>    }<br>  `;<br>  document.head.appendChild(styleEl);<br>  return className;<br>};</pre><pre>const className = css(`<br>  color: red;<br>  padding: 20px;<br>`); // &#39;c23j4&#39;</pre><blockquote>CSS-in-JS automates the scoping by generating unique selectors.</blockquote><h3>Implicit dependencies</h3><p>CSS offers a rule level code reuse, which means to reuse a style block, a rule has a selector. When selector applies to an element, it applies its entire style block. This is possible in essentially two ways:</p><p>1. A CSS rule includes multiple selectors to target different HTML elements.</p><p>2. Multiple class names or other attributes are applied to HTML elements, causing them to be targeted by multiple CSS rules.</p><p>Neither of those ages well, because both lead to monolithic code structure, where everything depends on everything. It becomes hard to clearly isolate the subsystems.</p><p>In the first case, when we add many selectors to a single CSS rule, the rule gets the references to other subsystems. You won’t be able to change those subsystems without touching that rule and it is easy to forget.</p><p>In the second case, where we use multiple class names or other attributes, this causes the element to be targeted by multiple CSS rules. This makes the relationship complex again, and again it is easy to forget what needs to be removed.</p><p>In both cases, we create dependencies which are hard to understand and change over time without a good strict system in place. It is hard for humans to be that consistent over time.</p><p>CSS-in-JS makes dependencies explicit because variables always reference the value in code visually. They are traceable because we can statically analyze where the value comes from. They are granular because we can reuse CSS values, properties or entire style blocks as we see fit.</p><blockquote>CSS-in-JS promotes explicit, traceable and granular dependencies.</blockquote><h3>Dead Code</h3><p>Due to the implicit relationship between HTML and CSS, it is generally hard to track down unused CSS rules and inform the author or strip them from the bundle. Often you can’t know where the rules have been used. For example, it could be multiple code bases or class names could be conditionally applied from a language that was used to generate HTML or class names have been manipulated by client-side JavaScript.</p><p>Over time dead code may have a negative impact on the site performance and the ability of developers to understand the code.</p><p>Thanks to explicit, traceable variables and modules in JavaScript, we can implement solutions on top, which create an explicit connection between a CSS rule and the HTML element.</p><blockquote>CSS-in-JS helps with removing dead code.</blockquote><h3>Non-deterministic source order specificity</h3><p>If you build a Single Page Application (SPA) and you split the CSS bundle per page, you can end up with non-deterministic source order specificity. In such situations the order in which CSS is injected depends on user actions, causing selectors to apply unpredictably to the HTML elements.</p><p>Imagine you load page A, and then you switch to page B without a full document reload. Technically you loaded CSS-A and then CSS-B. If selectors used in CSS-B supposed to override selectors from CSS-A we are good because CSS for B was loaded later and has a higher source order specificity.</p><p>If the next user comes from a link directly to page B, and then switch to page A, CSS-B will be loaded first, and CSS-A afterwards, causing CSS-A to have a higher source order specificity. Now you have to create visual regression tests for any possible navigation among entry points.</p><p>To solve this, it helps to tightly couple CSS and HTML, so that we always know what CSS is used by the currently rendered HTML.</p><blockquote>CSS-in-JS helps to avoid non-deterministic source order specificity.</blockquote><h3>One-to-many relationship</h3><p>The idea to separate the concerns based on a language ignores the fact that CSS was not designed to be truly separated from HTML.</p><p>CSS has implicit assumptions about the HTML structure. For example, flexbox layout makes an assumption that containers to position are direct children of the element it was applied to.</p><p>When a CSS rule is applied to different HTML elements across our application, we can basically describe it as a “one-to-many relationship”. If you change the CSS rule, you potentially need to modify all related HTML elements.</p><p>CSS-in-JS encourages this relationship to be one-to-one, while still keeping the ability to have shared properties. Currently not every CSS-in-JS API enforces one-to-one relationship because many libs support CSS reuse without the corresponding HTML. <strong>We need to make developers aware of this!</strong></p><p>It doesn’t matter which abstraction you use or none at all, the best way to share CSS is to share the HTML and ensure the CSS it needs gets rendered automatically.</p><blockquote>CSS-in-JS encourages the coupling of CSS and HTML.</blockquote><h3>Almighty selectors</h3><p>It is weird because some people refer to CSS as too powerful and some others refer to CSS-in-JS as too powerful regarding a level of abstraction.</p><p>The truth is they are both powerful but in different areas. CSS selectors are too powerful because they can target any element across the document. It’s a huge problem since we try to write CSS that has only access to elements within our HTML block or component.</p><p>CSS-in-JS helps to constrain that power by scoping its selectors. It is still not a complete solution because those selectors can reach into any child element if a given library supports cascading. It is a good leap forward though towards writing a more constrained CSS by default. Most CSS-in-JS libs support cascading not because its safe, but because it is practical and there are no good alternatives with safety mechanisms so far. Shadow root CSS is still not where it needs to be for mass adoption.</p><p>On the other hand, JavaScript is a much more powerful language, because the syntax is more expressive and allows many more patterns and notations. Complex UX logic is often hard to express without having conditionals, functions, and variables. A pure declarative syntax works well when the runtime is highly specialized for the use case, while CSS is used to accomplish a wide variety of tasks.</p><blockquote>CSS-in-JS gives the developer more expressiveness while encouraging more maintainable patterns than cascading.</blockquote><h3>State-based styling</h3><p>One of the very powerful patterns CSS-in-JS enables is state-based styling. Technically it is usually implemented as a JavaScript function which receives a state object and returns CSS properties. As a result, a CSS rule is generated that corresponds to the state of an element. Compared to a more traditional way, where we build a class attribute containing multiple class names, this has some advantages:</p><p>1. Logic responsible for the final CSS rule has access to the state and can be located together with the rest of styles.</p><p>2. Logic generating HTML becomes less cluttered by the classes concatenation logic.</p><p>Both of these points should make complex state-dependent CSS more readable.</p><blockquote>CSS-in-JS gives developers API to describe state-based styles in a better way than using a bunch of conditional class names.</blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h3>Conclusion</h3><p>I hope I was able to give you a perspective on the core drivers behind the concept. It is not my intention to judge any technology or to give a complete list of features, which vary between implementations. Also, I am not saying CSS-in-JS is the only future we can have, the point is though that if the community doesn’t understand the problems those tools are trying to solve, how are we going to move forward?</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f2f529a2757\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/dailyjs/what-is-actually-css-in-js-f2f529a2757\">What is actually CSS-in-JS?</a> was originally published in <a href=\"https://medium.com/dailyjs\">DailyJS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
        },
        {
          "title": "Redhooks a predictable state container for React applications.",
          "link": "https://medium.com/dailyjs/redhooks-a-predictable-state-container-for-react-applications-d3167b00ac2e?source=rss----f5105b08f43a---4",
          "guid": {
            "isPermaLink": "false",
            "$t": "https://medium.com/p/d3167b00ac2e"
          },
          "category": [
            "web-development",
            "react-hook",
            "react",
            "redux",
            "reactjs"
          ],
          "dc:creator": "Antonio Pangallo",
          "pubDate": "Thu, 31 Jan 2019 10:27:12 GMT",
          "atom:updated": "2019-01-31T10:27:12.504Z",
          "content:encoded": "<h3>Redhooks: A predictable state container for React applications</h3><h4>A reimplementation of the Redux API using React Hooks.</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*p1JNSg-BPIW7K7vFm2NI2w.png\" /></figure><h4>INTRODUCTION</h4><p>I have been using React for years, writing either big or small applications. For each one of them, the discussion beforehand was always: <em>should we or should we not use Redux for holding the application state</em>?</p><p>Holding app state with a predictable state container based on Redux’s principles like:</p><ul><li>Holding app’s state in a single store.</li><li>Keeping store’s state read-only.</li><li>Transforming the state tree writing pure reducer functions.</li></ul><p>It may offer advantages but also adds constraints to your applications.</p><p>Anytime we pick a “solution” we are binding our application to the advantages but also to the constraints that the chosen “solution” is based on.</p><p>Going back in time before redux or whatever is out there came out, we could write applications without applying those principles. In fact, none of them are mandatory when building an application.</p><h4>Code Thinking</h4><p>Thinking back I am reminded of a friend of mine’s quote:</p><blockquote>“Design Thinking is something that should be applied for coding too.” — <a href=\"https://medium.com/u/7e4163d5f22e\">Francesco Pini</a></blockquote><p>After years of coding experience, today I couldn’t agree more with this quote.</p><p>“Designing” your application based on your needs instead of current trends makes you a better thinker who is going to work less by working smarter.</p><p>As I like to say:</p><blockquote>“Code does not come from coder’s hands but from thinker’s minds.“</blockquote><p>I would suggest then:</p><blockquote>“be a thinker first then a coder.”</blockquote><p>Awareness of this makes your day-to-day coding much easier.</p><p>I am not pretending to be a philosopher, only a developer. So let’s go back to the main topic of this article and <strong>take a look at how to use Redhooks:</strong></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h3>WHAT IS REDHOOKS ?</h3><p><a href=\"https://github.com/iusehooks/redhooks\">Redhooks</a> is a tiny library for holding a predictable state container within your React applications based on the three principles described in the section above. Inspired by <a href=\"https://redux.js.org\">Reduxjs</a>, it reimplements Redux’s API using the experimental Hooks and the Context API.</p><p>Before starting to code let’s take a look at the application data flow.</p><h4>APPLICATION DATA FLOW</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/825/1*Y1dAiQiS1ua4g4NDsp24-g.png\" /></figure><p>The Counter and Greeter components are connected to the store which means that they can dispatch actions into it. Any dispatched action follows a unidirectional flow and gets into the “root” reducer function which, in our application, it is composed by the combination of two reducers. Receiving the previous state and the action as input, the “root” reducer function produces as output the new state.</p><p>Now that we have an idea of how it works we can start.</p><h3><strong>GETTING STARTED</strong></h3><p>Let’s create our first reducer functions.</p><h4>Reducer</h4><p>A reducer is a pure function that takes the previous state and an action which is a plain object and returns the next state.</p><p><strong>./reducers.js</strong></p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/63ecc56f7e8fd9237dd4321e1c84e10d/href\">https://medium.com/media/63ecc56f7e8fd9237dd4321e1c84e10d/href</a></iframe><p>As your application grows you may want to divide your state into independent parts, each one of them managed by a dedicated reducer function. In the example above we have two reducer functions: counter<strong> </strong>and<strong> </strong>greeting. After combining them into one function using the<strong> </strong>combineReducers, counter<strong> </strong>and<strong> </strong>greeting will be able to manage independent parts of the state.</p><p>By doing so we will produce the initial following state object:</p><pre> { <strong>counter</strong>: 0, <strong>greeting</strong>: &quot;good morning&quot; }</pre><p>Each time an action will be triggered the rootReducer function will be called with the previous state and the action triggered. Then every reducer function you combined using combineReducers will be invoked with that action deciding whether or not to change its “piece” of the state.</p><h4>Store</h4><p>Now that we combined our reducers we are ready to create our store. To do so, we use the createStore API which takes the reducer function and as second argument, optionally, a plain object in which we can add some extra props like a preloadedState,<strong> </strong>initialAction<strong> </strong>and middlewares.</p><blockquote>middlewares,<strong> </strong>like in redux, are a way to extend redhooks with custom functionality. For more details I invite you to read the <a href=\"https://github.com/iusehooks/redhooks#apply-middleware\">documentation</a>.</blockquote><p><strong>./store.js</strong></p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/6e814feb47c1bbee9a591640c31eabb8/href\">https://medium.com/media/6e814feb47c1bbee9a591640c31eabb8/href</a></iframe><p>When creating a store<strong> </strong>in addition to a preloaded state, we can also trigger an initial action. In the above example, we initialised our counter value to 1 and immediately trigger an “INCREMENT” action. As a result of this now our counter will have the value 2.</p><p>Next, let’s take a look at how we can use the store either for getting the state or for dispatching actions within Class or Function Components.</p><h4>Function Components</h4><p>Within function components, in order to access the store, we can use the useStore()<strong> </strong>Redhooks<strong> </strong>API. This returns an object with props that are the state object and the dispatch<strong> </strong>function.</p><p><strong>./components/Counter.js</strong></p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f40681368ecde815ffa77932d8ce9305/href\">https://medium.com/media/f40681368ecde815ffa77932d8ce9305/href</a></iframe><h4>TIPS</h4><blockquote>state<strong> </strong>is read only. Don’t change it by doing things like state = something. To update the state you have to <em>dispatch</em> actions.</blockquote><blockquote>Don’t use useStore()<strong> </strong>within Class Components because React Hooks are not allowed there. Instead, you can use the connect<strong> </strong>redhooks API.</blockquote><h4>Class Components</h4><p>Within a class component due to the fact that React Hooks are not allowed, we need to use the connect<strong> </strong>Redhooks API which connects either Class or Function Components to the Redhooks store. It also helps to improve performance by avoiding unnecessary re-renders by checking whether or not the props you subscribed to have changed due to actions.</p><p><strong>./components/Greeter.js</strong></p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/4e35195646d64ed945b06634cc2b3ead/href\">https://medium.com/media/4e35195646d64ed945b06634cc2b3ead/href</a></iframe><p>Using the mapStateToProps method we can subscribe any components to the Redhooks store. Any time the store is updated, mapStateToProps will be called and its results, which must be a plain object, will be merged into your component’s props. In the example above two props are injected, greeting<strong> </strong>and<strong> </strong>dispatch.</p><h4>TIP</h4><blockquote><em>connect</em><strong> </strong>accepts as it’s second argument either a function or a plain object. You can pass a function <a href=\"https://github.com/iusehooks/redhooks#connect\">mapDispatchToProps</a> that must return a plain object whose values are functions. Or a plain object whose values are <a href=\"https://github.com/iusehooks/redhooks#action-creator\">action creator</a> functions. If you choose to omit the second argument as we did above by default a prop named dispatch will be injected into your connected component.</blockquote><p>Now let’s put all together and render our tiny application.</p><h4>App Component</h4><p><strong>./components/App.js</strong></p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/a304344939182cc9e9c37df742776f3f/href\">https://medium.com/media/a304344939182cc9e9c37df742776f3f/href</a></iframe><h4>Render the application</h4><p><strong>./index.js</strong></p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c8b91b9af074c775e1f282f5be00479b/href\">https://medium.com/media/c8b91b9af074c775e1f282f5be00479b/href</a></iframe><p>The &lt;Provider /&gt; makes the Redhooks store available to any nested components.</p><p>And there you go, we have a live example sandbox for you to play with.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodesandbox.io%2Fembed%2Fjnxvow5wyw&amp;url=https%3A%2F%2Fcodesandbox.io%2Fs%2Fjnxvow5wyw&amp;image=https%3A%2F%2Fcodesandbox.io%2Fapi%2Fv1%2Fsandboxes%2Fjnxvow5wyw%2Fscreenshot.png&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=codesandbox\" width=\"1000\" height=\"500\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/0067bcdf350d6a058a23dc9e43591c60/href\">https://medium.com/media/0067bcdf350d6a058a23dc9e43591c60/href</a></iframe><h4>Other Sandbox Examples</h4><p>Following few open source projects implemented with redux have been migrated to Redhooks:</p><ul><li>Shopping Cart: <a href=\"https://codesandbox.io/s/5yn1258y4l\">Sandbox</a></li><li>TodoMVC: <a href=\"https://codesandbox.io/s/7jyq991p90\">Sandbox</a></li><li>Tree-View: <a href=\"https://codesandbox.io/s/rmw98onnlp\">Sandbox</a></li><li>Saga-Middleware: <a href=\"https://codesandbox.io/s/48pomo7rx7\">Sandbox</a></li><li>Redux-Thunk: <a href=\"https://codesandbox.io/s/n02r5400mp\">Sandbox</a></li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h3>Conclusion</h3><p>React Hooks API will be released on the 4th of February 2019 and Redhooks depends on them, so it should not be used in production until that day. Instead, if you like you can play with it and contribute even only by giving feedbacks.</p><p>I hope you enjoyed reading the article. 👏 Claps are welcome!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d3167b00ac2e\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/dailyjs/redhooks-a-predictable-state-container-for-react-applications-d3167b00ac2e\">Redhooks a predictable state container for React applications.</a> was originally published in <a href=\"https://medium.com/dailyjs\">DailyJS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
        },
        {
          "title": "Pretty JSON Output",
          "link": "https://medium.com/dailyjs/pretty-json-output-760b36becb06?source=rss----f5105b08f43a---4",
          "guid": {
            "isPermaLink": "false",
            "$t": "https://medium.com/p/760b36becb06"
          },
          "category": [
            "front-end-development",
            "programming",
            "software-development",
            "web-development",
            "javascript"
          ],
          "dc:creator": "Samantha Ming",
          "pubDate": "Mon, 28 Jan 2019 04:42:07 GMT",
          "atom:updated": "2019-01-28T16:51:44.577Z",
          "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hBF0kWiTuF59wCpSPc_aYg.png\" /><figcaption>Code Tidbit by SamanthaMing.com</figcaption></figure><p>Tired of the one-liner JSON output, well no more! Utilize JSON.stringify built-in pretty printing. Set the 3rd parameter with your desired spacing level 👍 Bam, instant GLAM✨</p><pre>const protein = {steak: &#39;🥩&#39;, bacon: &#39;🥓&#39;};</pre><pre>JSON.stringify(protein);<br>// {&quot;steak&quot;:&quot;🥩&quot;,&quot;bacon&quot;:&quot;🥓&quot;}</pre><pre>JSON.stringify(protein, null, 2);<br>/*<br>{<br>  &quot;steak&quot;: &quot;🥩&quot;,<br>  &quot;bacon&quot;: &quot;🥓&quot;<br>}<br>*/</pre><h3>Tab Spacing 😉</h3><p>But the Tab folks are like how about us?? Don’t worry, you can also pass &quot;\\t&quot; for tab level spacing 😄</p><pre>const protein = {steak: &#39;🥩&#39;, bacon: &#39;🥓&#39;};</pre><pre>JSON.stringify(protein, null, &quot;\\t&quot;);</pre><pre>/*<br>{<br> &quot;steak&quot;: &quot;🥩&quot;,<br> &quot;bacon&quot;: &quot;🥓&quot;<br>}<br>*/</pre><h3>Understanding the “Space” argument</h3><p>The 3rd parameter of the JSON.stringify is used to control the spacing. It&#39;s what gives you that pretty string output.</p><p>It allows 2 types of arguments: Number and String.</p><h3>a. Number</h3><p>You can use any number from 0 to 10 as your indentation.</p><pre>const protein = {steak: &#39;🥩&#39;, bacon: &#39;🥓&#39;};</pre><pre>JSON.stringify(protein, null, 1);<br>/*<br>{<br> &quot;steak&quot;: &quot;🥩&quot;,<br> &quot;bacon&quot;: &quot;🥓&quot;<br>}<br>*/</pre><h3>b. String</h3><p>Alternatively, you can use a string as your indentation. It allows a maximum of 10 characters. If you try to pass more than 10, it will just use the first 10 characters. So don’t try to beat the system 😝</p><pre>const protein = {steak: &#39;🥩&#39;, bacon: &#39;🥓&#39;};</pre><pre>JSON.stringify(protein, null, &quot;I 💛&quot;);<br>/*<br>{<br>I 💛&quot;steak&quot;: &quot;🥩&quot;,<br>I 💛&quot;bacon&quot;: &quot;🥓&quot;<br>}<br>*/</pre><h3>What is the 2nd parameter 🤔</h3><p>The 2nd parameter is also called the <strong>replacer</strong> parameter. You can use it to transform the result.</p><p>It allows 2 types of arguments: Array and Function.</p><h3>a. Array</h3><p>I want to show you something really interesting when you pass in an array. You can use it to cherry pick the key-value pair that you want to output.</p><pre>const protein = {<br>  steak: &#39;🥩&#39;, <br>  bacon: &#39;🥓&#39;,<br>  pop: &#39;🥤&#39;,<br>  tea: &#39;🍵&#39;,<br>  shrimp: &#39;🍤&#39;,<br>};</pre><pre>JSON.stringify(protein, [&#39;steak&#39;, &#39;pop&#39;], 2);<br>/*<br>{<br>  &quot;steak&quot;: &quot;🥩&quot;,<br>  &quot;pop&quot;: &quot;🥤&quot;<br>}<br>*/</pre><h3>b. Function</h3><p>The <strong>replacer</strong> is called for each item. So you can also pass in a function. This means you can loop over each item and with each pass, manipulate with the logic defined in your function.</p><p>Here’s an example, where I skip over the properties where the value is not a string. In other words, I only want to show the items where the value is a number.</p><pre>const protein = {<br>  steak: &#39;🥩&#39;, <br>  calorie: 271,<br>  bacon: &#39;🥓&#39;,<br>  sodium: 58,<br>};</pre><pre>const replacer = function(key, value) {<br>  if(typeof value !== &quot;string&quot;) {<br>    return value<br>  }<br>  return undefined;<br>}</pre><pre>JSON.stringify(protein, replacer, 2);<br>/*<br>{<br>  &quot;calorie&quot;: 271,<br>  &quot;sodium&quot;: 58<br>}<br>*/</pre><h3>Resources</h3><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">MDN Web Docs — JSON.stringify</a></li><li><a href=\"https://www.w3schools.com/js/js_json_stringify.asp\">w3schools — JSON.stringify</a></li><li><a href=\"https://stackoverflow.com/questions/4810841/how-can-i-pretty-print-json-using-javascript\">Stack Overflow: How can I pretty-print JSON using JavaScript?</a></li></ul><h3>Share</h3><ul><li><a href=\"https://twitter.com/samantha_ming/status/1089250835383480320\">Like this on Twitter</a></li><li><a href=\"https://www.instagram.com/p/BtHEE_6hN3L\">Like this on Instagram</a></li><li><em>Originally published at </em><a href=\"https://www.samanthaming.com/tidbits/45-pretty-json-output\"><em>www.samanthaming.com</em></a></li></ul><p>Thanks for reading ❤</p><p>Say Hello!<strong> </strong><a href=\"http://instagram.com/samanthaming\"><strong>Instagram</strong></a><strong> | </strong><a href=\"https://www.facebook.com/hisamanthaming\"><strong>Facebook</strong></a><strong> | </strong><a href=\"https://twitter.com/samantha_ming\"><strong>Twitter</strong></a><strong> | </strong><a href=\"https://www.samanthaming.com\"><strong>SamanthaMing.com</strong></a><strong> | </strong><a href=\"https://www.samanthaming.com/blog\"><strong>Blog</strong></a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=760b36becb06\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/dailyjs/pretty-json-output-760b36becb06\">Pretty JSON Output</a> was originally published in <a href=\"https://medium.com/dailyjs\">DailyJS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
        },
        {
          "title": "How to Remove Array Duplicates in ES6",
          "link": "https://medium.com/dailyjs/how-to-remove-array-duplicates-in-es6-5daa8789641c?source=rss----f5105b08f43a---4",
          "guid": {
            "isPermaLink": "false",
            "$t": "https://medium.com/p/5daa8789641c"
          },
          "category": [
            "web-development",
            "front-end-development",
            "javascript",
            "programming",
            "software-development"
          ],
          "dc:creator": "Samantha Ming",
          "pubDate": "Mon, 14 Jan 2019 06:56:28 GMT",
          "atom:updated": "2019-01-20T21:33:47.064Z",
          "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Z1SU1atGbGMgY_jHaDyMGA.png\" /><figcaption>Code Tidbit by SamanthaMing.com</figcaption></figure><p>Here are three ways to filter out duplicates from an array and return only the unique values. My favorite is using Set cause it’s the shortest and simplest 😁</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tmEwK00Tgvo_MW1sWjZn4g.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h3>1. Using Set</h3><p>Let me start first by explaining what Set is:</p><blockquote>Set is a new data object introduced in ES6. Because Set only lets you store unique values. When you pass in an array, it will remove any duplicate values.</blockquote><p>Okay, let’s go back to our code and break down what’s happening. There are 2 things going on:</p><ol><li>First, we are creating a new Setby passing an array. Because Setonly allows unique values, all duplicates will be removed.</li><li>Now the duplicates are gone, we’re going to convert it back to an array by using the spread operator ...</li></ol><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*f0io_19WfjiN42N2JKIZ0Q.png\" /></figure><h4>Convert Set to an Array using Array.from</h4><p>Alternatively, you can also use Array.from to convert a Set into an array:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MZgefa7Rur-RafdrT8OSpw.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h3>2: Using filter</h3><p>In order to understand this option, let’s go through what these two methods are doing: indexOf and filter.</p><h4>indexOf</h4><p>The indexOf method returns the first index it finds of the provided element from our array.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*W1jHsgUou5frNHlbC-jVpw.png\" /></figure><h4>filter</h4><p>The filter() method creates a new array of elements that pass the conditional we provide. In other words, if the element passes and returns true, it will be included in the filtered array. And any element that fails or return false, it will be NOT be in the filtered array.</p><p>Let’s step in and walk through what happens as we loop through the array.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gwrwc11agEuXo-CQ4mObxg.png\" /></figure><p>Below is the output from the console.log showed above. The duplicates are where the index doesn’t match the indexOf. So in those cases, the condition will be false and won’t be included in our filtered array.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/670/1*QCIsNc2xN7SPZc3dYhjReg.png\" /></figure><h4>Retrieve the duplicate values</h4><p>We can also use the filter method to retrieve the duplicate values from the array. We can do this by simply adjusting our condition like so:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QWswjvxzLyhuycOQ8qzohA.png\" /></figure><p>Again, if we step through the code above and see the output:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/672/1*SqNQiboZ6Tk7M2GB_n_T5A.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h3>3: Using reduce</h3><p>The reduce method is used to reduce the elements of the array and combine them into a final array based on some reducer function that you pass.</p><p>In this case, our reducer function is checking if our final array contains the item. If it doesn’t, push that item into our final array. Otherwise, skip that element and return just our final array as is (essentially skipping over that element).</p><p>Reduce is always a bit more tricky to understand, so let’s also step into each case and see the output:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*g_TJT20Qtgwn_U-H42CBlA.png\" /></figure><p>And here’s the output from the console.log:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xxIRrX8Q8st2-uVOe5-T3A.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZrJKJqBsksWd-8uKM9OvgA.png\" /></figure><h3>Community Input</h3><ul><li>Thanks <a href=\"https://medium.com/u/b6e828908aeb\">Miguel Albrecht</a> for doing a benchmark for these solutions! Check out his <a href=\"https://medium.com/@miguel.albrecht/performance-of-javascript-array-ops-2690aed47a50\">article</a> 👍</li></ul><h3>Resources</h3><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">MDN Web Docs — Set</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">MDN Web Docs — Filter</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">MDN Web Docs — Reduce</a></li><li><a href=\"https://gist.github.com/telekosmos/3b62a31a5c43f40849bb\">GitHubGist: Remove duplicates from JS array</a></li><li><a href=\"https://codehandbook.org/how-to-remove-duplicates-from-javascript-array/\">CodeHandbook: How to Remove Duplicates from JavaScript Array</a></li></ul><h3>Share</h3><ul><li><a href=\"https://twitter.com/samantha_ming/status/https://twitter.com/samantha_ming/status/1084176864858390528\">Like this on Twitter</a></li><li><a href=\"https://www.instagram.com/p/https://www.instagram.com/p/BsjA-eiBAeT/\">Like this on Instagram</a></li><li><em>Originally published at </em><a href=\"https://www.samanthaming.com/tidbits/43-3-ways-to-remove-array-duplicates\"><em>www.samanthaming.com</em></a><em>.</em></li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><p>Thanks for reading ❤</p><p>Say Hello!<strong> </strong><a href=\"http://instagram.com/samanthaming\"><strong>Instagram</strong></a><strong> | </strong><a href=\"https://www.facebook.com/hisamanthaming\"><strong>Facebook</strong></a><strong> | </strong><a href=\"https://twitter.com/samantha_ming\"><strong>Twitter</strong></a><strong> | </strong><a href=\"https://www.samanthaming.com\"><strong>SamanthaMing.com</strong></a><strong> | </strong><a href=\"https://www.samanthaming.com/blog\"><strong>Blog</strong></a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5daa8789641c\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/dailyjs/how-to-remove-array-duplicates-in-es6-5daa8789641c\">How to Remove Array Duplicates in ES6</a> was originally published in <a href=\"https://medium.com/dailyjs\">DailyJS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
        },
        {
          "title": "#CodeTidbits30",
          "link": "https://medium.com/dailyjs/codetidbits30-9a782b17fa89?source=rss----f5105b08f43a---4",
          "guid": {
            "isPermaLink": "false",
            "$t": "https://medium.com/p/9a782b17fa89"
          },
          "category": [
            "css",
            "programming",
            "web-development",
            "javascript",
            "front-end-development"
          ],
          "dc:creator": "Samantha Ming",
          "pubDate": "Sat, 05 Jan 2019 20:11:15 GMT",
          "atom:updated": "2019-01-07T12:22:27.924Z",
          "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MUDEOzBla-Vap74N3Im3Vg.jpeg\" /></figure><p>For the entire month of December, I posted DAILY code tidbits! 30 days straight of the very best JavaScript, HTML, and CSS snippets.</p><p>I posted this series on my <a href=\"https://www.instagram.com/samanthaming/\">Instagram</a> and <a href=\"https://twitter.com/samantha_ming\">Twitter</a>. Don’t worry if you missed it! Here’s the summary of all 30 Code Tidbits. Make sure you scroll to the end where I also included code notes. Enjoy! 🎁</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3AwNpThOICtdoKB_BApqlg.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*o7fh-jIVui5oeWj3mfiasw.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vxF4GA_JLoWlK3mrn6m3Cw.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kiQk81Xb-IK5z8hdvmQoMQ.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gYyEYSZ_xtj6fBHHqC_yAQ.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sd_rBjFbrg4lgF--2tCq8g.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Hvul3LzK6BiSWlNcdEgOBw.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/750/1*FQq-qi1RKmMfc8zw_LBULQ.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_h8H23SsWHUo0BK-tnvJ6Q.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Yo3u7muTpqy6w0DNX1LY3Q.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7BYW5F5YxsVx1y9o8BPpzg.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VqsmtRQ0EvBdg8ax_3gXrw.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hUGyPR6XqWI99ifxrzBfWQ.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ujlz1U2_Oro6hvNUvG20CQ.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GuCtAjIkpvXBohkyjqrVTg.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*J2J_cehaNKrFov3xrW3xzg.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GUP2vbtohmv8N9hVsoNNcA.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/686/1*QdCRU5FZev5PYiDcVemGxA.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*0c7IUZAWEaZOyqpP9V66rg.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*oZac6W14m8zjWxR1i89fjA.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2T01ZSYDAVC02e2gS43kOA.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/553/1*QX8kvCRW-1_-iU3sAx5O9g.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bUlcwJwOl8olh2it8YhWYA.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ie-2Kq7HYodEUOO94p6fNQ.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Z6VL5lPef6NajMGkBHkoEw.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Yskr0x43_9ipnIQZrVodgQ.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TkfByGLpkgNPehAn33EfxA.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*pobl870aIvgoVAQp_4LtSQ.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tWAq_IEAvVw0IyW4cAdw6g.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*EM6iRQcMc3-5cd-Q60ZB7w.png\" /></figure><h3>Code Notes</h3><h4><strong>Day 1 🎄</strong></h4><p>2 Methods to Convert to true Array</p><p><a href=\"https://www.samanthaming.com/tidbits/1-convert-to-true-array\">Convert Array-like to True Array | SamanthaMing.com</a></p><h4>Day 2 🎄</h4><p>ES6: Shorthand for Defining Methods in Objects</p><p><a href=\"https://www.samanthaming.com/tidbits/5-concise-method-syntax\">Shorthand for Defining Object Methods | SamanthaMing.com</a></p><h4>Day 3 🎄</h4><p>ES6: Creating Objects with Dynamic Keys</p><p><a href=\"https://www.samanthaming.com/tidbits/7-create-object-with-dynamic-keys\">Creating Objects with Dynamic Keys | SamanthaMing.com</a></p><h4>Day 4 🎄</h4><p>Remove Array Duplicates using ES6 Set</p><p><a href=\"https://www.samanthaming.com/tidbits/10-remove-array-duplicates-using-set\">Remove Array Duplicates using ES6 Set | SamanthaMing.com</a></p><h4>Day 5 🎄</h4><p>Split String using ES6 Spread</p><p><a href=\"https://www.samanthaming.com/tidbits/12-split-string-using-spread\">Split String using ES6 Spread | SamanthaMing.com</a></p><h4>Day 6 🎄</h4><p>Use console.table instead to display your data</p><p><a href=\"https://www.samanthaming.com/tidbits/2-console-table\">console.table to Display Data | SamanthaMing.com</a></p><h4>Day 7 🎄</h4><p>Combine Multiple Arrays using ES6 Spread</p><p><a href=\"https://www.samanthaming.com/tidbits/14-combine-multiple-arrays-using-spread\">Combine Multiple Arrays using Spread | SamanthaMing.com</a></p><h4>Day 8 🎄</h4><p>CSS Custom Selection Styling</p><p><a href=\"https://www.samanthaming.com/tidbits/6-custom-css-selection-styling\">Custom Selection Styling | SamanthaMing.com</a></p><h4>Day 9 🎄</h4><p>Named Parameters using ES6 Destructured Objects</p><p><a href=\"https://www.samanthaming.com/tidbits/18-named-param-using-destructured-objects\">Named Parameters using Destructured Objects | SamanthaMing.com</a></p><h4>Day 10 🎄</h4><p>Setting Default Parameters</p><p><a href=\"https://www.samanthaming.com/tidbits/11-setting-default-parameters\">Setting Default Parameters | SamanthaMing.com</a></p><h4>Day 11 🎄</h4><p>JS Essentials: Falsy Values</p><p><a href=\"https://www.samanthaming.com/tidbits/25-js-essentials-falsy-values\">JS Essentials: Falsy Values | SamanthaMing.com</a></p><h4>Day 12 🎄</h4><p>Refactoring the if condition</p><p><a href=\"https://www.samanthaming.com/tidbits/26-refactoring-if-condition\">Refactoring IF condition | SamanthaMing.com</a></p><h4>Day 13 🎄</h4><p>Checking if String contains Substring</p><p><a href=\"https://www.samanthaming.com/tidbits/28-check-if-string-contains-substring\">Checking if a string contains substring | SamanthaMing.com</a></p><h4>Day 14 🎄</h4><p>How to Compare 2 Objects in JavaScript</p><p><a href=\"https://www.samanthaming.com/tidbits/33-how-to-compare-2-objects\">How to Compare 2 Objects in JavaScript | SamanthaMing.com</a></p><h4>Day 15 🎄</h4><p>Better Boolean Variable Names</p><p><a href=\"https://www.samanthaming.com/tidbits/34-better-boolean-variable-names\">Better-boolean-variable-names | SamanthaMing.com</a></p><h4>Day 16 🎄</h4><p>Bad Variable Names to Avoid</p><p><a href=\"https://www.samanthaming.com/tidbits/36-bad-variable-names-to-avoid\">Bad Variable Names To Avoid | SamanthaMing.com</a></p><h4>Day 17 🎄</h4><p>ES6 Way to Clone an Array</p><p><a href=\"https://www.samanthaming.com/tidbits/35-es6-way-to-clone-an-array\">ES6 Way To Clone An Array | SamanthaMing.com</a></p><h4>Day 18 🎄</h4><p>Make a HTML element editable with contenteditable</p><p><a href=\"https://www.samanthaming.com/tidbits/32-html-contenteditable\">HTML contentattribute | SamanthaMing.com</a></p><h4>Day 19 🎄</h4><p>Dynamic Property Name with ES6</p><p><a href=\"https://www.samanthaming.com/tidbits/37-dynamic-property-name-with-es6\">Dynamic Property Name With ES6 | SamanthaMing.com</a></p><h4>Day 20 🎄</h4><p>No Else Return</p><p><a href=\"https://www.samanthaming.com/tidbits/23-no-else-return\">No Else Return | SamanthaMing.com</a></p><h4>Day 21 🎄</h4><p>No Useless Escape</p><p><a href=\"https://www.samanthaming.com/tidbits/41-no-useless-escape\">No Useless Escape | SamanthaMing.com</a></p><h4>Day 22 🎄</h4><p>CSS Caret Color</p><p><a href=\"https://www.samanthaming.com/tidbits/31-css-caret-color\">CSS caret-color | SamanthaMing.com</a></p><h4>Day 23 🎄</h4><p>Colorful Console Message</p><p><a href=\"https://www.samanthaming.com/tidbits/40-colorful-console-message\">Colorful Console Message | SamanthaMing.com</a></p><h4>Day 24 🎄</h4><p><em>Refactor if-else with Ternary Operator (No code notes)</em></p><h4>Day 25 🎄</h4><p><em>String </em><em>toUpperCase()(No code notes)</em></p><h4>Day 26 🎄</h4><p><em>while loop (No code notes)</em></p><h4>Day 27 🎄</h4><p>Create a Downloadable Link using HTML5 Download Attribute</p><p><a href=\"https://www.samanthaming.com/tidbits/38-html-download-attribute\">Downloadable Link withm HTML5 Download Attribute | SamanthaMing.com</a></p><h4>Day 28 🎄</h4><p>JavaScript: 3 Ways to Convert to Boolean</p><p><a href=\"https://www.samanthaming.com/tidbits/34-better-boolean-variable-names\">Better-boolean-variable-names | SamanthaMing.com</a></p><h4>Day 29 🎄</h4><p>2 Ways to Repeat Strings in JavaScript</p><p><a href=\"https://www.samanthaming.com/tidbits/22-2-ways-to-repeat-strings\">2 Ways to Repeat Strings | SamanthaMing.com</a></p><h4>Day 30 🎄</h4><p>4 Ways to Combine Strings in JavaScript</p><p><a href=\"https://www.samanthaming.com/tidbits/15-4-ways-to-combine-strings\">4 Ways to Combine Strings | SamanthaMing.com</a></p><p>That’s a wrap! I hope you enjoyed this #CodeTidbits30 daily series that I posted on my <a href=\"https://www.instagram.com/samanthaming/\">Instagram</a> and <a href=\"https://twitter.com/samantha_ming\">Twitter</a>.</p><h4>What’s next?</h4><p>I have a lot of exciting articles and programming posts coming, so make sure you stay tuned!</p><p>Weekly Code Tidbits will return on my <a href=\"https://www.instagram.com/samanthaming/\">Instagram</a> and <a href=\"https://twitter.com/samantha_ming\">Twitter</a>. And of course, don’t forget to <strong>Follow me on </strong><a href=\"https://medium.com/@samanthaming\"><strong>Medium</strong></a> to get the more in-depth code notes 🍎</p><p>Thanks for reading ❤</p><p>Say Hello!<strong> </strong><a href=\"http://instagram.com/samanthaming\"><strong>Instagram</strong></a><strong> | </strong><a href=\"https://www.facebook.com/hisamanthaming\"><strong>Facebook</strong></a><strong> | </strong><a href=\"https://twitter.com/samantha_ming\"><strong>Twitter</strong></a><strong> | </strong><a href=\"https://www.samanthaming.com\"><strong>SamanthaMing.com</strong></a><strong> | </strong><a href=\"https://www.samanthaming.com/blog\"><strong>Blog</strong></a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9a782b17fa89\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/dailyjs/codetidbits30-9a782b17fa89\">#CodeTidbits30</a> was originally published in <a href=\"https://medium.com/dailyjs\">DailyJS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
        },
        {
          "title": "The top 12 Node Weekly links in 2018",
          "link": "https://medium.com/dailyjs/the-top-12-node-weekly-links-in-2018-c0bec98efd91?source=rss----f5105b08f43a---4",
          "guid": {
            "isPermaLink": "false",
            "$t": "https://medium.com/p/c0bec98efd91"
          },
          "category": [
            "js",
            "nodejs"
          ],
          "dc:creator": "Za'e Johnson",
          "pubDate": "Fri, 21 Dec 2018 14:29:35 GMT",
          "atom:updated": "2018-12-21T14:29:35.561Z",
          "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ilqRz-8VADjoXWPkJ340SQ.jpeg\" /></figure><p><em>Another year of </em><a href=\"https://nodeweekly.com/?utm_source=medium&amp;utm_campaign=roundup&amp;utm_content=node2018\"><em>Node Weekly</em></a><em> means another roundup.</em></p><p>Once again we’ve dug through our data to bring you <strong>the most popular links</strong> that featured in <a href=\"https://nodeweekly.com/?utm_source=medium&amp;utm_campaign=roundup&amp;utm_content=node2018\">Node Weekly</a> this year.</p><p><strong><em>Here’s what clicked with Node developers:</em></strong></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*90CzRkCJ75BNoHnnhz026w.png\" /></figure><h3><a href=\"https://medium.com/@nodepractices/were-under-attack-23-node-js-security-best-practices-e33c146cb87d\">A Checklist of 23 Node.js Security Best Practices</a></h3><p><a href=\"https://www.goldbergyoni.com\">Yoni Goldberg</a>, Kyle Martin and Bruno Scheufler | <a href=\"https://nodeweekly.com/issues/249\">Featured in Issue 249</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*m24cVMEcnEAJ_57SD7mxWw.png\" /></figure><p><a href=\"https://medium.com/@nodepractices/were-under-attack-23-node-js-security-best-practices-e33c146cb87d\">We&#39;re under attack! 23 Node.js security best practices</a></p><p>A curated list of 23 high-level Node security best practices with code examples and quotes from the top-ranked blogs.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*1M5I7rf9JYmcaENErr-XIg.jpeg\" /></figure><h3><a href=\"https://hueniverse.com/on-node-framework-popularity-355fbde5cbe4\">On Node Framework Popularity</a></h3><p>Eran Hammer (Hapi) | <a href=\"https://nodeweekly.com/issues/258\">Featured in Issue 258</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nyMJbq_z15b6wML6CCcZ8A.png\" /></figure><p><a href=\"https://hueniverse.com/on-node-framework-popularity-355fbde5cbe4\">On Node Framework Popularity</a></p><p>Findings from asking over 800 developers their thoughts on various Node HTTP frameworks.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*1M5I7rf9JYmcaENErr-XIg.jpeg\" /></figure><h3><a href=\"https://www.youtube.com/watch?v=M3BM9TB-8yA\">10 Things Ryan Dahl Regrets About Node.js</a></h3><p>JSConf EU| <a href=\"https://nodeweekly.com/issues/241\">Featured in Issue 241</a></p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FM3BM9TB-8yA%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DM3BM9TB-8yA&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FM3BM9TB-8yA%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d0e762107fb87d1e41d8621b13b4d822/href\">https://medium.com/media/d0e762107fb87d1e41d8621b13b4d822/href</a></iframe><p>Original Node.js inventor Ryan Dahl reflects on his time working on the project, highlighting what he considers to be some early design mistakes with Node. Regrets orient around the build system, security and modules.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*1M5I7rf9JYmcaENErr-XIg.jpeg\" /></figure><h3><a href=\"https://github.com/LeCoupa/awesome-cheatsheets/blob/master/backend/node.js\">A Code-Based Node.js Cheatsheet</a></h3><p>Julien Le Coupanec | <a href=\"https://nodeweekly.com/issues/224\">Featured in Issue 224</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*e_fz9sQrjAA5dGrMSjhKzA.png\" /></figure><p><a href=\"https://github.com/LeCoupa/awesome-cheatsheets/blob/master/backend/node.js\">LeCoupa/awesome-cheatsheets</a></p><p>Lots of quick-fire code snippets in a single source file, covering global objects, console methods, fs methods, exports, process handling, and more.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*1M5I7rf9JYmcaENErr-XIg.jpeg\" /></figure><h3><a href=\"https://blog.risingstack.com/why-developers-love-node-js-2018-survey/\">Why Developers Love Node &amp; What Issues They Have</a></h3><p>Rising Stack | <a href=\"https://nodeweekly.com/issues/224\">Featured in Issue 224</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ama5Uxe1Mo9fCelTg8rE-Q.png\" /></figure><p><a href=\"https://blog.risingstack.com/why-developers-love-node-js-2018-survey/\">Why Developers Love Node.js &amp; what&#39;s their main issue with it? | @RisingStack</a></p><p>Results of a survey of 539 Node developers covering why they love using Node, what they use it for, and what the biggest problems they encounter are.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*1M5I7rf9JYmcaENErr-XIg.jpeg\" /></figure><h3><a href=\"https://blog.npmjs.org/post/178487845610/rethinking-javascript-test-coverage\">Rethinking JavaScript Test Coverage</a></h3><p><a href=\"https://twitter.com/benjamincoe\">Benjamin Coe</a><em> | </em><a href=\"https://nodeweekly.com/issues/257\">Featured in Issue 257</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/1*Y91DeZt2ATXBqdcWV1aTsA.png\" /></figure><p><a href=\"https://blog.npmjs.org/post/178487845610/rethinking-javascript-test-coverage\">Rethinking JavaScript Test Coverage</a></p><p>Shared in September — Node 10.10 and above offers a native code coverage reporting feature. This post explained how it came to be, how it works, and how to create your own reports from the data V8 provides.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*1M5I7rf9JYmcaENErr-XIg.jpeg\" /></figure><h3><a href=\"https://nemethgergely.com/nodejs-best-practices-how-to-become-a-better-developer-in-2018/\">How to Become a Better Node.js Developer (in 2018</a>)</h3><p>Gergely Nemeth | <a href=\"https://nodeweekly.com/issues/220\">Featured in Issue 220</a></p><p><a href=\"https://nemethgergely.com/nodejs-best-practices-how-to-become-a-better-developer-in-2018/\">Node.js Best Practices - How to become a better Node.js developer in 2018</a></p><p>A few straightforward best practices, shared back in January, that aim to help you be a better Node developer.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*1M5I7rf9JYmcaENErr-XIg.jpeg\" /></figure><h3><a href=\"http://2ality.com/2018/04/async-iter-nodejs.html\">Using Async Iteration Natively in Node</a></h3><p><a href=\"https://medium.com/u/7fab51e62203\">Axel Rauschmayer</a> | <a href=\"https://nodeweekly.com/issues/233\">Featured in issue 233</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YEz4yLKurWLWexPb-7mGaw.png\" /></figure><p><a href=\"http://2ality.com/2018/04/async-iter-nodejs.html\">Reading streams via async iteration in Node.js</a></p><p>How asynchronously iterating over readable streams works in Node 10.x.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*1M5I7rf9JYmcaENErr-XIg.jpeg\" /></figure><h3><a href=\"https://nodesource.com/blog/what-you-can-expect-from-node-js-10\">What You Can Expect From Node.js 10</a></h3><p><a href=\"https://medium.com/u/3131ca4bf3f2\">Tierney Cyren</a> | <a href=\"https://nodeweekly.com/issues/234\">Featured in Issue 234</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zITu-LxZKHpIv_bDkoqdOQ.png\" /></figure><p><a href=\"https://nodesource.com/blog/what-you-can-expect-from-node-js-10\">What You Can Expect From Node.js 10</a></p><p>The first release of Node 10 was released back in April. This post looks at what was new, including HTTP/2 support, organized coded errors, and more.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*1M5I7rf9JYmcaENErr-XIg.jpeg\" /></figure><h3><a href=\"https://blog.npmjs.org/post/178027064160/next-generation-package-management\">Next Generation Package Management with Crux</a></h3><p>The npm Blog | <a href=\"https://nodeweekly.com/issues/255\">Featured in Issue 255</a></p><p><a href=\"https://blog.npmjs.org/post/178027064160/next-generation-package-management\">Next Generation Package Management</a></p><p>Released back in September, <a href=\"https://nodeweekly.com/link/52766/web\">crux</a> is an experimental JavaScript package manager from the folks at npm, Inc, that aims to provoke new thoughts on how package management should be handled.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*1M5I7rf9JYmcaENErr-XIg.jpeg\" /></figure><h3><a href=\"https://cravencode.com/post/docker/nodejs-local-development/\">How to Use Docker for Node.js Development</a></h3><p>Cody Craven | <a href=\"https://nodeweekly.com/issues/253\">Featured in Issue 253</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QKKKXUKb7sWNgYgDWH6Z7w.png\" /></figure><p><a href=\"https://cravencode.com/post/docker/nodejs-local-development/\">How to use Docker for Node.js development</a></p><p><em>“There are a couple aspects of Node.js that make using Docker for development somewhat difficult. The primary difficulties come from dependency differences based on environment and a long running server process during development.”</em></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*1M5I7rf9JYmcaENErr-XIg.jpeg\" /></figure><h3><a href=\"https://www.gatsbyjs.org/blog/2018-09-17-gatsby-v2/\">Gatsby 2.0: The Node and React-Powered Site Generator</a></h3><p><em>Kyle Mathews | </em><a href=\"https://nodeweekly.com/issues/256\">Featured in Issue 256</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*eM5T9oFlWmgKOLpKFH_6DQ.png\" /></figure><p><a href=\"https://www.gatsbyjs.org/blog/2018-09-17-gatsby-v2/\">Announcing Gatsby 2.0.0 🎉🎉🎉</a></p><p>App generator Gatsby proved popular with our readers.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*90CzRkCJ75BNoHnnhz026w.png\" /></figure><p><strong>Thanks for reading!</strong></p><blockquote>Enjoy this roundup? Be sure to give it a clap! 👏</blockquote><blockquote><em>Want to receive a weekly update featuring the latest Node news and developments throughout 2019? Why not </em><a href=\"https://nodeweekly.com/?utm_source=medium&amp;utm_campaign=roundup&amp;utm_content=node2018\"><em>subscribe to Node Weekly</em></a><em>.</em></blockquote><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c0bec98efd91\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/dailyjs/the-top-12-node-weekly-links-in-2018-c0bec98efd91\">The top 12 Node Weekly links in 2018</a> was originally published in <a href=\"https://medium.com/dailyjs\">DailyJS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
        },
        {
          "title": "The most popular JavaScript Weekly links of 2018",
          "link": "https://medium.com/dailyjs/the-most-popular-javascript-weekly-links-of-2018-e70b6f1d1c11?source=rss----f5105b08f43a---4",
          "guid": {
            "isPermaLink": "false",
            "$t": "https://medium.com/p/e70b6f1d1c11"
          },
          "category": [
            "jquery",
            "redux",
            "angular",
            "javascript"
          ],
          "dc:creator": "Chris Brandrick",
          "pubDate": "Thu, 20 Dec 2018 14:57:16 GMT",
          "atom:updated": "2018-12-20T14:57:16.677Z",
          "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IUzQ-URkhcnP_FZfZcqezw.jpeg\" /></figure><h4>Based on what over 150,000 readers clicked</h4><p>As the year comes to a close we’re going to take a look back at some of the most popular JavaScript articles, tools and tips shared during the past twelve months.</p><p>Based on data from links shared in the <a href=\"https://javascriptweekly.com/?utm_source=medium&amp;utm_campaign=roundup&amp;utm_content=javascript2018\">JavaScript Weekly newsletter</a>, here’s what JS devs have been clicking on in 2018:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZrJKJqBsksWd-8uKM9OvgA.png\" /></figure><h4><a href=\"https://github.com/leonardomso/33-js-concepts#readme\">33 Concepts Every JavaScript Developer Should Know</a></h4><p><a href=\"https://medium.com/u/b1e29b1112ac\">Leonardo Maldonado</a> | <a href=\"https://javascriptweekly.com/issues/408\">Shared in October’s Issue 408</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*QVp3VbEg27mI5d_y.jpg\" /></figure><p>A popular, curated collection of links to tutorials on 33 different areas of JavaScript worth understanding well, including types, closures, equality, scope, and different JavaScript engines.</p><blockquote><a href=\"https://github.com/leonardomso/33-js-concepts#readme\"><em>github.com/leonardomso</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://2018.stateofjs.com/\">The State of JavaScript 2018</a></h4><p><a href=\"https://medium.com/u/156e844b0e31\">Sacha Greif</a> | <a href=\"https://javascriptweekly.com/issues/413\">Shared in November’s Issue 413</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*AXT7109MkGpB_L5C.jpg\" /></figure><p>The results from this popular annual survey arrived in November.</p><p>React was the clear, dominant front-end framework of choice. Jest and Mocha are neck and neck in the testing space, and Python was noted as the most common <em>other</em> language for JS developers to use.</p><blockquote><a href=\"https://2018.stateofjs.com/\"><em>2018.stateofjs.com</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://www.smashingmagazine.com/2018/07/redux-designers-guide/\">What is Redux: A Designer’s Guide</a></h4><p><a href=\"https://medium.com/u/6a8d5c4f686a\">Linton Ye</a> | <a href=\"https://javascriptweekly.com/issues/393\">Shared in July’s Issue 393</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/0*vFh7pswk1AVyiAES.png\" /></figure><p>A really neat high-level approach to explaining Redux and what it offers <em>beyond</em> state management.</p><blockquote><a href=\"https://www.smashingmagazine.com/2018/07/redux-designers-guide/\"><em>smashingmagazine.com</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://medium.com/@mattburgess/beyond-console-log-2400fdf4a9d8\">Going Beyond console.log()</a></h4><p><a href=\"https://medium.com/u/c872406f4e32\">Matt Burgess</a> | <a href=\"https://javascriptweekly.com/issues/411\">Shared in November’s Issue 411</a></p><p>While console.log() may form the basis of many people’s debugging strategies, the console object has a <em>lot</em> more to offer, as covered in this well-received piece.</p><p>If you don’t know about console.assert or console.count, step in.</p><blockquote><a href=\"https://medium.com/@mattburgess/beyond-console-log-2400fdf4a9d8\"><em>medium.com/@mattburgess</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://github.com/30-seconds/30-seconds-of-code#readme\">30 Seconds of Code: A Curated Collection of Useful JS Snippets</a></h4><p>30 Seconds Team| <a href=\"https://javascriptweekly.com/issues/405\">Shared in September’s Issue 405</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*SoSA2f8CiCvey3jD.jpg\" /></figure><p>This project has been around for a while now, but it saw a notable ‘1.1’ release back in September, where lots of the snippets saw updates and improvements.</p><p>If you want to do lots of interesting things with arrays, math, strings, and more, it’s worth checking out.</p><blockquote><a href=\"https://github.com/30-seconds/30-seconds-of-code#readme\"><em>github.com/30-seconds</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://githubengineering.com/removing-jquery-from-github-frontend/\">How GitHub Removed jQuery From Their Frontend</a></h4><p>GitHub | <a href=\"https://javascriptweekly.com/issues/402\">Shared in September’s Issue 402</a></p><p>GitHub dropped jQuery as a dependency of the frontend code for GitHub.com back in September. This transition took several years and this look at what they learnt and what libraries have replaced it proved popular with JavaScript Weekly readers.</p><blockquote><a href=\"https://githubengineering.com/removing-jquery-from-github-frontend/\"><em>githubengineering.com</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://frontendmasters.com/books/front-end-handbook/2018/\">The Front-End Developer Handbook 2018 Edition</a></h4><p><a href=\"https://medium.com/u/c54dd6160844\">cody lindley</a> | <a href=\"https://javascriptweekly.com/issues/381\">Shared in April’s Issue 381</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/768/1*WW-miHeckbEBN3ieIgRCRg.png\" /></figure><p>This popular online guide outlines and discusses the practice of front-end engineering, how to learn it and what tools are used in the practice.</p><blockquote><a href=\"https://frontendmasters.com/books/front-end-handbook/2018/\"><em>frontendmasters.com/books</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://medium.freecodecamp.org/here-are-examples-of-everything-new-in-ecmascript-2016-2017-and-2018-d52fa3b5a70e\">Examples of Everything New in ES2016, 2017, and 2018</a></h4><p><a href=\"https://medium.com/u/2af670e1ee6f\">rajaraodv</a> | <a href=\"https://javascriptweekly.com/issues/380\">Shared in April’s Issue 380</a></p><p>A lengthy, worthwhile roundup of all the bits and pieces from recent ECMAScript specs.</p><blockquote><a href=\"https://medium.freecodecamp.org/here-are-examples-of-everything-new-in-ecmascript-2016-2017-and-2018-d52fa3b5a70e\"><em>medium.freecodecamp.org</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4\">The Cost of JavaScript in 2018</a></h4><p><a href=\"https://medium.com/u/2508e4c7a8ec\">Addy Osmani</a> | <a href=\"https://javascriptweekly.com/issues/397\">Shared in Issue 397</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*oyZVqBnCZkhNnMIoHoip7A.png\" /></figure><p>Addy Osmani shares thoughts and findings on how much effect JavaScript has on page sizes and performance and some ways to improve matters.</p><blockquote><a href=\"https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4\"><em>medium.com/@addyosmani</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://blog.angular.io/version-7-of-angular-cli-prompts-virtual-scroll-drag-and-drop-and-more-c594e22e7b8c\">Angular 7 Released</a></h4><p><a href=\"https://medium.com/u/a1fba6cea10f\">Stephen Fluin</a>| <a href=\"https://javascriptweekly.com/issues/408\">Shared in October’s Issue 408</a></p><p>This major release landed in October with upgrades for the entire Angular platform (from the core framework to Angular Material and the CLI tools).</p><blockquote><a href=\"https://blog.angular.io/version-7-of-angular-cli-prompts-virtual-scroll-drag-and-drop-and-more-c594e22e7b8c\"><em>blog.angular.io</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://medium.com/@anildash/what-if-javascript-wins-84898e5341a\">What If JavaScript ‘Wins’?</a></h4><p><a href=\"https://medium.com/u/a75df5e8a16c\">Anil Dash</a> | <a href=\"https://javascriptweekly.com/issues/386\">Shared in May’s Issue 386</a></p><p>Reflections on JavaScript’s continuing growth and how <em>network effects</em> could see it essentially become the ‘default’ programming language.</p><blockquote><a href=\"https://medium.com/@anildash/what-if-javascript-wins-84898e5341a\"><em>medium.com/@anildash</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://blog.github.com/2018-10-05-js13kgames-highlights-2018/\">13 Games in Under 13KB of JavaScript</a></h4><p>GitHub | <a href=\"https://javascriptweekly.com/issues/407\">Shared in October’s Issue 407</a></p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgfycat.com%2Fifr%2Fcompleterighthorseshoebat&amp;url=https%3A%2F%2Fgfycat.com%2Fcompleterighthorseshoebat&amp;image=https%3A%2F%2Fthumbs.gfycat.com%2FCompleteRightHorseshoebat-size_restricted.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=gfycat\" width=\"1920\" height=\"1080\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/8455fbc080c83c5702e9fdba13208d52/href\">https://medium.com/media/8455fbc080c83c5702e9fdba13208d52/href</a></iframe><p>A look at some of GitHub’s favorite entries to the popular annual js13kGames competition. Those taking part are challenged to build a game in under 13 kilobytes, <em>assets and all</em>.</p><blockquote><a href=\"https://blog.github.com/2018-10-05-js13kgames-highlights-2018/\"><em>blog.github.com</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://medium.com/@cramforce/designing-very-large-javascript-applications-6e013a3291a3\">Designing (Very) Large JavaScript Applications</a></h4><p><a href=\"https://medium.com/u/7813e6de99d2\">Malte Ubl</a> | <a href=\"https://javascriptweekly.com/issues/382\">Shared in April’s Issue 382</a></p><p>A written version of a talk given by Google’s Malte Ubl at JSConf Australia that took a high-level look at modularity, lazy loading code, and similar concepts. Here’s a video version:</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FZZmUwXEiPm4%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DZZmUwXEiPm4&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FZZmUwXEiPm4%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e49aa1ae1b08a1d5bf415044bce03547/href\">https://medium.com/media/e49aa1ae1b08a1d5bf415044bce03547/href</a></iframe><blockquote><a href=\"https://medium.com/@cramforce/designing-very-large-javascript-applications-6e013a3291a3\">medium.com/@cramforce</a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://github.com/nhnent/tui.calendar\">TUI Calendar: An Attractive, Full Featured Calendar Control</a></h4><p>NHN Entertainment | <a href=\"https://javascriptweekly.com/issues/383\">Shared in April’s Issue 383</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*e9tV1TIiMkqTYBBQ.png\" /></figure><p>A highly customizable JavaScript calendar widget that supports numerous view types (weekly, monthly, etc.), dragging and resizing of schedule items, and is basically like your own Google Calendar in a box.</p><blockquote><a href=\"https://github.com/nhnent/tui.calendar\"><em>github.com/nhnent</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://developers.google.com/web/fundamentals/primers/modules\">Using JavaScript Modules on the Web</a></h4><p><a href=\"https://medium.com/u/2508e4c7a8ec\">Addy Osmani</a> and Mathias Mynens | <a href=\"https://javascriptweekly.com/issues/391\">Shared in Issue 391</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*9qTkNrECSi4wpkwZ.jpg\" /></figure><p>A Chrome-themed explanation of what ES modules are, how to use them in the browser, and how to keep them fast.</p><blockquote><a href=\"https://developers.google.com/web/fundamentals/primers/modules\"><em>developers.google.com</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://github.com/trekhleb/javascript-algorithms#readme\">JavaScript Algorithms and Data Structures</a></h4><p><a href=\"https://medium.com/u/2ef3e91643a1\">Oleksii Trekhleb</a> | <a href=\"https://javascriptweekly.com/issues/387\">Shared in May’s Issue 387</a></p><p>A wide variety of algorithms <em>(e.g. permutations, Levenshtein distance, binary search)</em> and data structures <em>(e.g. linked lists, trees, stacks)</em> implemented in JavaScript with helpful explanations and links to further reading.</p><blockquote><a href=\"https://github.com/trekhleb/javascript-algorithms#readme\"><em>github.com/trekhleb</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZrJKJqBsksWd-8uKM9OvgA.png\" /></figure><p><strong>Thanks for taking a look back with us! <br>Enjoyed it? Give it a 👏 clap or 👏👏👏 three! 😉</strong></p><blockquote><em>Want to stay up to date in 2019? </em><a href=\"https://javascriptweekly.com/?utm_source=medium&amp;utm_campaign=roundup&amp;utm_content=javascript2018\"><em>Subscribe to JavaScript Weekly</em></a><em>.</em></blockquote><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e70b6f1d1c11\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/dailyjs/the-most-popular-javascript-weekly-links-of-2018-e70b6f1d1c11\">The most popular JavaScript Weekly links of 2018</a> was originally published in <a href=\"https://medium.com/dailyjs\">DailyJS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
        },
        {
          "title": "From Native to JavaScript and back or trigger native components in React Native",
          "link": "https://medium.com/dailyjs/from-native-to-javascript-and-back-or-trigger-native-components-in-react-native-1fa072e032fc?source=rss----f5105b08f43a---4",
          "guid": {
            "isPermaLink": "false",
            "$t": "https://medium.com/p/1fa072e032fc"
          },
          "category": [
            "pdf",
            "ios",
            "components",
            "android",
            "react-native"
          ],
          "dc:creator": "Maksym Rusynyk",
          "pubDate": "Wed, 28 Nov 2018 19:05:31 GMT",
          "atom:updated": "2018-12-20T10:18:39.524Z",
          "content:encoded": "<h3>From Native to JavaScript and back (or trigger native components in React Native)</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*bcurE7mkH9rNXG2vCb2UbA.jpeg\" /></figure><p>If you are looking for how to bridge native components to JavaScript in React Native you can check the<a href=\"https://medium.com/dailyjs/how-to-build-react-native-bridge-and-get-pdf-viewer-153109e42948\"> How to build react-native bridge and get PDF Viewer</a> article which can be enough in most cases. <em>But what if you need to cross the bridge in another way?</em></p><p>Of course, you can use the declarative way and change the property, but this is not what we are looking for and we do not want to re-render react components. Moreover, it limits the application with a lack of functionality and makes it difficult to implement functionality, like reload the document if it failed to load (<em>could be some network issues or you need to refresh the document, etc.</em>), or other actions like save, refresh, etc. And we can actually compare it by crossing the bridge in only one way because there is no way back.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*bku_lJByUZI8XZ-emB7YQg.jpeg\" /></figure><p>Hopefully React Native is powerful enough and allows to call native components from JavaScript too.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><p>Assuming you already have a project and a component that you bridged to JavaScript, <strong>let’s make it possible to call native components from JavaScript and extend the bridge functionality</strong>.</p><p>It can be done in the following way:</p><ul><li>Implement android change</li><li>Implement JavaScript change and test</li><li>Implement iOS change</li></ul><p>Open the view manager and implement getCommandsMap and receiveCommandmethods:</p><ul><li>getCommandsMap - Should return the map between names of the commands and IDs that are then used in receiveCommand method</li><li>receiveCommand - A method that receives events/commands directly from JavaScript</li></ul><p>The implementation will be the following:</p><pre>private static final int COMMAND_RELOAD = 1;</pre><pre>// the code of your view manager<br>...</pre><pre>@Override<br>public Map&lt;String,Integer&gt; getCommandsMap() {<br> return MapBuilder.of(&quot;reload&quot;, COMMAND_RELOAD);<br>}</pre><pre>public void receiveCommand(final PDFView view, int command, final ReadableArray args) {<br> switch (command) {<br> case COMMAND_RELOAD: {<br> // The code you are going to execute when the command is called<br> break;<br> }<br> default: {<br> break;<br> }<br> }<br>}</pre><p>And as we can see it is pretty simple to implement and you can easily extend it with other commands too.</p><p>The implementation requires <a href=\"https://facebook.github.io/react-native/docs/direct-manipulation\">Direct Manipulation</a> and accessing the component (<em>it can be accessed using </em><em>ref</em>):</p><pre>&lt;RNPDFView<br> ref={ref =&gt; {<br> this._viewerRef = ref;<br> }}<br> {/* other attributes */}<br>/&gt;</pre><p>Next step is to define the reload function that will trigger the command and it is slightly different for Android and iOS:</p><ul><li>On Android, we can use UIManager and dispatchViewManagerCommand;</li><li>On iOS, we access the view manager and call its method to trigger the event.</li></ul><p>The implementation will be:</p><pre>// Imports and other code</pre><pre>class PDFView extends React.Component&lt;Props, *&gt; {<br> // component implementation<br> <br> reload() {<br> if (this._viewerRef) {<br> const handle = findNodeHandle(this._viewerRef);</pre><pre>if (!handle) {<br> throw new Error(&#39;Cannot find node handles&#39;);<br> }</pre><pre>await Platform.select({<br> android: async () =&gt; {<br> return UIManager.dispatchViewManagerCommand(<br> handle,<br> UIManager.PDFView.Commands.reload,<br> [],<br> );<br> },<br> ios: async () =&gt; {<br> return NativeModules.PDFViewManager.reload(handle);<br> },<br> })();<br> } else {<br> throw new Error(&#39;No ref to PDFView component, check that component is mounted&#39;);<br> }<br> }<br>}</pre><p>And in your application, after ref to the PDFView component is received, trigger the reload command:</p><pre>// Event that can be triggered by some button<br>onButtonClick = () =&gt; {<br> this.reload();<br>}</pre><pre>// A method that triggers reload<br>reload = () =&gt; {<br> if (this._pdfRef) {<br> this._pdfRef.reload();<br> }<br>}</pre><pre>// Get ref to component<br>onRef = (ref: ?PDFView) =&gt; {<br> this._pdfRef = ref;<br>}</pre><pre>render() {<br> // other code<br> return (<br> {/* App implementation */}<br> &lt;PDFView<br> {/* Other properties */}<br> onRef={this.onRef}<br> /&gt;<br> );<br>}</pre><p>That’s all. Now the reload method can be called from any place of the application and whenever it is required. There is no need to force properties to change or to reload react components.</p><p>Now, when the JavaScript to Android bridge is ready and works, it is time to implement it for iOS. The implementation for iOS is slightly different and requires from the component to expose the method that has to be triggered. RCT_EXPORT_METHOD is used for that:</p><pre>RCT_EXPORT_METHOD(reload: (nonnull NSNumber *)reactTag resolver: (RCTPromiseResolveBlock)resolve rejecter: (RCTPromiseRejectBlock)reject) {<br> // implementation<br>}</pre><p>and the exported method provides reactTag parameter and promises. Using uiManager and received reactTag it is possible to get the instance of the viewer:</p><pre>PDFView *view = (PDFView *)[self.bridge.uiManager viewForReactTag: reactTag];</pre><p>..and after that, any method of the viewer can be triggered (<em>reload in current case</em>). The final implementation will be:</p><pre>RCT_EXPORT_METHOD(reload: (nonnull NSNumber *)reactTag resolver: (RCTPromiseResolveBlock)resolve rejecter: (RCTPromiseRejectBlock)reject) {<br> dispatch_async(dispatch_get_main_queue(), ^{<br> PDFView *pdfView = (PDFView *)[self.bridge.uiManager viewForReactTag: reactTag];<br> if (!pdfView) {<br> reject(ERROR_INVALID_REACT_TAG, [NSString stringWithFormat: @&quot;ReactTag passed: %@&quot;, reactTag], nil);<br> return;<br> }<br> [pdfView reload];<br> resolve(nil);<br> });<br>}</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*lKXCjsqoiKvH2ZzyV4Wobw.jpeg\" /></figure><p>It is not a lot of work to bridge something from JavaScript to native and back, and <strong>having such bridges allows us to significantly extend the functionality of React Native </strong>— and for example improve the performance of some critical parts of the app that requires better performance, implement missing functionality or to reuse some of the components that were already developed. Moreover, it proves one more time that the possibilities of React Native are really amazing and React Native allows to develop mature applications with less effort for both platforms — iOS and Android.</p><blockquote>All described techniques are used in the <a href=\"https://github.com/rumax/react-native-PDFView\">PDF Viewer</a> react native component which also includes a <a href=\"https://github.com/rumax/react-native-PDFView/tree/master/demo\">demo project</a> where you can check how the bridge works, etc.</blockquote><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1fa072e032fc\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/dailyjs/from-native-to-javascript-and-back-or-trigger-native-components-in-react-native-1fa072e032fc\">From Native to JavaScript and back or trigger native components in React Native</a> was originally published in <a href=\"https://medium.com/dailyjs\">DailyJS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
        },
        {
          "title": "The top 12 React links of 2018",
          "link": "https://medium.com/dailyjs/the-top-12-react-links-of-2018-eea4c11d35a0?source=rss----f5105b08f43a---4",
          "guid": {
            "isPermaLink": "false",
            "$t": "https://medium.com/p/eea4c11d35a0"
          },
          "category": [
            "redux",
            "javascript",
            "create-react-app",
            "react-native",
            "react"
          ],
          "dc:creator": "Chris Brandrick",
          "pubDate": "Thu, 20 Dec 2018 10:12:06 GMT",
          "atom:updated": "2018-12-20T10:12:06.668Z",
          "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tp93qiY6ntxy5m_43VpRUw.jpeg\" /></figure><h4>⚛️ Looking back over the past twelve months</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><p>Each week over 25,000 React developers stay up-to-date with all best links, tutorials and tools from across the web in <em>React Status</em> — <a href=\"https://react.statuscode.com/?utm_source=medium&amp;utm_campaign=roundup&amp;utm_content=react2018\">a free weekly digest bringing together the best of the past 7 days from across the React ecosystem</a>.</p><p>We’ve gone through the data from the year and bought it all together, highlighting the most popular links we’ve shared.</p><p>📊📈 <strong><em>So, here’s what React devs have been reading in 2018.</em></strong></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZrJKJqBsksWd-8uKM9OvgA.png\" /></figure><h4><a href=\"https://daveceddia.com/context-api-vs-redux/\">Redux vs the React Context API</a></h4><p><a href=\"https://medium.com/u/3f6706a859f8\">Dave Ceddia</a>| <a href=\"https://react.statuscode.com/issues/98\">Shared in July’s Issue 98</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/893/1*t3NdUaMSZ_NX_Cp09_edMA.png\" /></figure><p>A look at how the <em>then-new</em> context API in React 16.3 works compared to Redux and why you’d choose one over the other.</p><blockquote><a href=\"https://daveceddia.com/context-api-vs-redux/\"><em>daveceddia.com</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://github.com/adam-golab/react-developer-roadmap\">A Visual Roadmap to Becoming a React Developer (In 2018)</a></h4><p>Adam Gołąb| <a href=\"https://react.statuscode.com/issues/96\">Shared in July’s Issue 96</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*MHSZPF4sTl6Bg8uV.jpg\" /></figure><p>This one stirred up a lot of opinions on social media and places <a href=\"https://news.ycombinator.com/item?id=17470496\">like Hacker News</a>, and also proved popular in our newsletter. While it’s not essential to learn <em>everything</em> to be a good React developer, this illustration attempts to give a lay of the land, at least.</p><blockquote><a href=\"https://github.com/adam-golab/react-developer-roadmap\"><em>github.com/adam-golab</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://reactjs.org/blog/2018/11/27/react-16-roadmap.html\">The React 16.x Roadmap</a></h4><p><a href=\"https://medium.com/u/a3a8af6addc1\">Dan Abramov</a>| <a href=\"https://react.statuscode.com/issues/116\">Shared in November’s Issue 116</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/897/1*Sm6tH2CI93CdO2LMF7kamg.png\" /></figure><p>If you’ve been following the React world over the past year, you’ll have run into a variety of new concepts like hooks and ‘Suspense’ and possibly wondered how it all fits into the big picture. This post explains it all and how these features will become fully supported in final React releases.</p><blockquote><a href=\"https://reactjs.org/blog/2018/11/27/react-16-roadmap.html\"><em>reactjs.org</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://evergreen.segment.com/\">Evergreen: A React UI Framework</a></h4><p><a href=\"https://medium.com/u/6e946b6a2866\">Segment</a> | <a href=\"https://react.statuscode.com/issues/110\">Shared in October’s Issue 110</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/848/1*MuEN1fpAr5P57PJX-xXd6w.png\" /></figure><p>A popular suite of polished React <a href=\"https://evergreen.segment.com/components/\">components</a> from basic layout primitives like buttons and text inputs to menus, side sheets and tables.</p><blockquote><a href=\"https://evergreen.segment.com/\"><em>evergreen.segment.com</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://github.com/reduxjs/redux/releases/tag/v4.0.0\">Redux 4.0 Released: The Predictable State Container</a></h4><p><a href=\"https://react.statuscode.com/issues/84\">Shared in April’s Issue 84</a></p><p><em>“If you’re a React user, this is going to be a lot like going from 15 to 16. Not a lot of user-facing changes, but some interesting improvements under the hood.”</em></p><blockquote><a href=\"https://github.com/reduxjs/redux/releases/tag/v4.0.0\"><em>github.com/reduxjs</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://www.youtube.com/watch?v=pUlwhe-kmog\">Why I No Longer Use Redux With React</a></h4><p><a href=\"https://medium.com/u/36ed94674ddf\">Ben Awad</a> | <a href=\"https://react.statuscode.com/issues/110\">Shared in October’s Issue 110</a></p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FpUlwhe-kmog%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DpUlwhe-kmog&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FpUlwhe-kmog%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/bcacddc457a4c2b3d64b24192657be67/href\">https://medium.com/media/bcacddc457a4c2b3d64b24192657be67/href</a></iframe><p>Ben Awad, well known for his React tutorials on YouTube, explains why he no longer uses Redux and what he does instead.</p><blockquote><a href=\"https://www.youtube.com/watch?v=pUlwhe-kmog\"><em>youtube.com</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://logrocket-blog.ghost.io/death-by-a-thousand-cuts-a-checklist-for-eliminating-common-react-performance-issues/\">Ways to Eliminate Common React Performance Issues</a></h4><p><a href=\"https://medium.com/u/aea1cff96976\">Ohans Emmanuel</a> | <a href=\"https://react.statuscode.com/issues/109\">Shared in October’s Issue 109</a></p><p>A pragmatic step-by-step guide to eliminating common React-related performance issues.</p><blockquote><a href=\"https://logrocket-blog.ghost.io/death-by-a-thousand-cuts-a-checklist-for-eliminating-common-react-performance-issues/\"><em>logrocket-blog.ghost.io</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://medium.freecodecamp.org/the-best-way-to-bind-event-handlers-in-react-282db2cf1530\">The Best Way to Bind Event Handlers in React</a></h4><p><a href=\"https://medium.com/u/e36ca8291af4\">Charlee Li</a> | <a href=\"https://react.statuscode.com/issues/87\">Shared in May’s Issue 87</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/870/1*H3e4UPDKfuRjuiiiwUIAnQ.png\" /></figure><p>Explores common ways of creating event bindings in React, their pros and cons, plus the author’s favorite approach.</p><blockquote><a href=\"https://medium.freecodecamp.org/the-best-way-to-bind-event-handlers-in-react-282db2cf1530\"><em>medium.freecodecamp.org</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://medium.com/airbnb-engineering/sunsetting-react-native-1868ba28e30a\">Why Airbnb are ‘Sunsetting’ React Native</a></h4><p><a href=\"https://medium.com/u/bfa26a83c4b6\">Gabriel Peal</a> | <a href=\"https://react.statuscode.com/issues/93\">Shared in June’s Issue 93</a></p><p>In this post from the summer, Airbnb explained how they were unable to overcome some technical and organizational challenges around React Native and are reinvesting in native development.</p><blockquote><a href=\"https://medium.com/airbnb-engineering/sunsetting-react-native-1868ba28e30a\"><em>medium.com/airbnb-engineering</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://www.youtube.com/watch?v=AiJ8tRRH0f8&amp;list=PLV5CVI1eNcJgNqzNwcs4UKrlJdhfDjshf\">Simply React: Why I Love React Patterns So Much</a></h4><p><a href=\"https://medium.com/u/db72389e89d8\">Kent C. Dodds</a> | <a href=\"https://react.statuscode.com/issues/102\">Shared in August’s Issue 102</a></p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FAiJ8tRRH0f8%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DAiJ8tRRH0f8&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FAiJ8tRRH0f8%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/24d76747a1f280a4572476db8e888ce6/href\">https://medium.com/media/24d76747a1f280a4572476db8e888ce6/href</a></iframe><p>Practical, example-driven evangelism from Kent who tells a story to justify component patterns and why he thinks you should be using them yourself.</p><blockquote><a href=\"https://www.youtube.com/watch?v=AiJ8tRRH0f8&amp;list=PLV5CVI1eNcJgNqzNwcs4UKrlJdhfDjshf\"><em>youtube.com</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://reactjs.org/blog/2018/10/23/react-v-16-6.html\">React v16.6.0 Released</a></h4><p><a href=\"https://medium.com/u/62e7de0d6312\">Sebastian Markbåge</a> | <a href=\"https://react.statuscode.com/issues/111\">Shared in October’s Issue 111</a></p><p>Despite being a minor release with ‘a few new convenient features’ this link got plenty of clicks. Version 16.6.0 introduced React.memo, which provides a way for function components to only be re-rendered if their props change, a way to do code splitting using Suspense, and an easier way to consume Context from class components.</p><blockquote><a href=\"https://reactjs.org/blog/2018/10/23/react-v-16-6.html\"><em>reactjs.org</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h4><a href=\"https://www.telerik.com/blogs/5-things-i-didnt-know-about-create-react-app\">Five Things I Didn’t Know About Create-React-App</a></h4><p><a href=\"https://medium.com/u/3cacaef482fb\">Blanca Mendizábal Perelló</a> | <a href=\"https://react.statuscode.com/issues/113\">Shared in November’s Issue 113</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/870/0*P9FWSDSG2cqDhmk1\" /></figure><p>Looking for tips for using Create React App? Here are five features you may not know about.</p><blockquote><a href=\"https://www.telerik.com/blogs/5-things-i-didnt-know-about-create-react-app\"><em>telerik.com</em></a></blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZrJKJqBsksWd-8uKM9OvgA.png\" /></figure><p><strong>Thanks for taking a look back with us! <br>Enjoyed it? Give it a 👏 clap or 👏👏👏 three! 😉</strong></p><blockquote><em>Want to stay up to date in 2019? </em><a href=\"https://react.statuscode.com/?utm_source=medium&amp;utm_campaign=roundup&amp;utm_content=react2018\"><em>Subscribe to React Status</em></a><em>.</em></blockquote><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=eea4c11d35a0\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/dailyjs/the-top-12-react-links-of-2018-eea4c11d35a0\">The top 12 React links of 2018</a> was originally published in <a href=\"https://medium.com/dailyjs\">DailyJS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
        },
        {
          "title": "How to send Errors into Slack",
          "link": "https://medium.com/dailyjs/how-to-send-errors-into-slack-dc552e30506f?source=rss----f5105b08f43a---4",
          "guid": {
            "isPermaLink": "false",
            "$t": "https://medium.com/p/dc552e30506f"
          },
          "category": [
            "programming",
            "angular",
            "slack",
            "web-development",
            "javascript"
          ],
          "dc:creator": "Michael Karén",
          "pubDate": "Wed, 19 Dec 2018 11:19:55 GMT",
          "atom:updated": "2019-01-26T22:55:32.764Z",
          "content:encoded": "<h3>How to send Errors into Slack in Angular</h3><h4>Easy access to error logs by using a tool you already have available.</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*6eaVmLOEP4kDOqsQ\" /><figcaption>Photo by <a href=\"https://unsplash.com/@pankajpatel?utm_source=medium&amp;utm_medium=referral\">Pankaj Patel</a> on <a href=\"https://unsplash.com?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>If you are using <strong>Slack </strong>at your company, then the chances are that you have the Slack client running on your <strong>desktop and phone</strong>. Having your errors <strong>more visible</strong> in a Slack channel will make it easier to find and notice them.</p><p>This solution is best suited in a <strong>smaller internal</strong> tool. When solutions grow, they need more advanced tooling for error tracking. But getting your errors to Slack is an easy way to get started. If you are not using Slack, you could convert the ideas behind this article to your tooling.</p><blockquote>In this article, I will create a beautiful message and send it to a Slack channel. I will also show the steps needed to get your channel running.</blockquote><p>I’m using Angular, but it could as well have been vanilla JavaScript or any other framework.</p><p><em>The example code is on </em><a href=\"https://github.com/melcor76/slack-error-log\"><em>Github</em></a><em>.</em></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZrJKJqBsksWd-8uKM9OvgA.png\" /></figure><h3>What is Slack?</h3><p>The name is an acronym for “<strong>S</strong>earchable <strong>L</strong>og of <strong>A</strong>ll <strong>C</strong>onversation and <strong>K</strong>nowledge.”</p><blockquote>Basically, it is a communications tool for groups where you create a workspace with multiple channels. Every channel can be public or private with its own topic.</blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*A-i7m6WVoelPwqhB.png\" /><figcaption><a href=\"https://xkcd.com/1782/\">xkcd</a> — it’s like IRC</figcaption></figure><p>There also are lots of different apps and integrations. You can, for example, have your builds in one channel and deploys in another by sending data to Slack from your chosen tool.</p><blockquote>Or as Slack says: “Where work happens”</blockquote><h3>Why use Slack for Errors?</h3><p>If your company is using Slack as a communication tool, then it makes sense to integrate it with your tooling. You can, for example, record your failing builds and deploys there. And why not then also log your errors there?</p><p>Since you probably already have Slack open on your desktop and maybe on your phone as well, all these logs will be more available to people.</p><blockquote>Having Slack open on all devices makes it easier to notice when something bad is happening.</blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/620/0*LFGrElvIuPS53HRG.jpg\" /></figure><p>Every solution can have its Slack channel for errors. You can also differentiate for different environments like test and production. Errors can also be customized as needed as we will see later in this article.</p><h3>Slack Account</h3><p>If you are already using Slack, you can skip these next steps and jump right to the coding part.</p><blockquote>To be able to test our code we need to have a Slack channel where to send the errors.</blockquote><p>Follow this <a href=\"https://get.slack.help/hc/en-us/articles/206845317-Create-a-Slack-workspace\">5 step recipe</a>:</p><ol><li>Visit the workspace creation page: <a href=\"https://slack.com/create\"><strong>slack.com/create</strong></a>.</li><li><strong>Enter your email address</strong>. Make sure it’s an inbox you can access for the next step!</li><li>Slack will send a confirmation code to the email address you entered. Keep an eye on your inbox for the email.</li><li>When the email arrives, <strong>enter your confirmation code</strong> to continue.</li><li>Follow the directions on each page. You’ll have a chance to select a <strong>display name</strong>, <strong>password</strong>, and <strong>workspace name</strong>.</li></ol><p>For this example, I created the workspace Angular Avengers, and I got the URL: <a href=\"https://angular-avengers.slack.com/\">https://angular-avengers.slack.com/</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WWiSa826T7RZog4vnQAtEw.png\" /></figure><h3>Webhook</h3><p>Before we start coding, we need an address where to send our errors. For this, we need a Slack app with a Webhook. This is the way we <a href=\"https://get.slack.help/hc/en-us/articles/115005265063-Incoming-WebHooks-for-Slack\">add tooling</a> to our workspace.</p><blockquote>Incoming Webhooks are a simple way to post messages from apps into Slack. Creating an Incoming Webhook gives you a unique URL to which you send a <a href=\"https://en.wikipedia.org/wiki/JSON\">JSON</a> payload with the message text and some options.</blockquote><ol><li>Create a <a href=\"https://api.slack.com/apps/new\"><strong>Slack app</strong></a> (if you don’t already have one).</li><li>Enable <strong>Incoming Webhooks</strong> from the settings page.</li><li>After the settings page refreshes, click <strong>Add New Webhook to Workspace.</strong></li><li>Pick a channel that the app will post to, then click <strong>Authorize.</strong></li><li>Use your <a href=\"https://api.slack.com/incoming-webhooks#posting_with_webhooks\">Incoming Webhook URL</a> to post a message to Slack.</li></ol><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nUcQi3WdSpWHZmE-Ey015w.png\" /></figure><p>OK, now that we have all the Slack infrastructure in place we can start coding our Angular application.</p><h3>The Application</h3><p>The app is just a button that sends Errors to the Slack channel.</p><blockquote>Remember to add HttpClientModule to app.module imports to be able to use HttpClient to post the errors to Slack.</blockquote><p>The Slack service needs to take care of three things before it can post the errors.</p><ol><li>Set the Webhook</li><li>Define a Slack message</li><li>Set content-type header</li></ol><p>We have already got the Webhook URL so now its time to use it.</p><pre>const webHook = &#39;your-webhook-url&#39;;</pre><h3>Sending the Message</h3><p><a href=\"https://api.slack.com/docs/messages\">Messages</a> are the basic building block of all conversations on Slack. The minimum viable message consists of the channel and a text.</p><pre>const message = {<br>  channel: &#39;#angular&#39;,<br>  text: error.message<br>}</pre><p>We also need to set the content-type header, or we will run into a CORS error. Text/HTML, which is the default, is not accepted by Slack.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U4b272JGNqCkWv11YYo5uA.png\" /></figure><pre>const options = {<br>  headers: new HttpHeaders(<br>    { &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39; }<br>  )<br>};</pre><p>Now we have all the three parts and are ready to post to Slack.</p><pre>this.http.post(webHook, message, options).subscribe();</pre><p>When we click the button, an error appears in the Slack channel! 🎉</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/259/1*hInB1bFy10XN9ErfF5vSGw.png\" /></figure><p>That’s great, but this message is not giving us enough information. Let’s see what we can do to improve it.</p><h3>Message Attachments</h3><p>We can add some more context to the message by adding an <a href=\"https://api.slack.com/docs/message-attachments\">attachment</a> to it. I’m not going into detail on styling messages, but there is excellent info in the <a href=\"https://api.slack.com/\">Slack API documentation</a>.</p><pre>attachments: [<br>  {<br>    author_name: window.location.href,<br>    color: &#39;danger&#39;,<br>    title: &#39;Trace&#39;,<br>    text: error.stack<br>  }<br>]</pre><p>Now the message looks better.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/679/1*bkEo2UoLhDKExbXJIXU_jw.png\" /></figure><p>I think this would be enough to get us started on locating the bug.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/564/0*iV70EaL21sIJ5Yvo.jpg\" /></figure><h3>Security</h3><p>You will be exposing your Webhook client side. Anyone could then get hold of it and post to it. Therefore a better solution could be first to send the errors to a secure API. And if errors occur server side, then you should consider not making a roundtrip but send them to Slack straight away.</p><p>In other words, the solution presented here is not for your enterprise solution where security is paramount. It is more of an example of how you quickly can get started.</p><p>Also if your user base is not that small and you ship a nasty bug to production it will be hard to keep track of all the bugs that get sent to your channel. 😨</p><h3>Hints</h3><ul><li>Set the correct content-type header.</li><li>Exclude the Authorization header from Slack calls.</li><li>Keep error channels private.</li><li>Consider security by sending the errors server side.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*4877k4Hq9dPdtmvg9hnGFA.jpeg\" /></figure><h3>Other use cases</h3><p>There might be other use cases better suited than error logging. You could, for example, send a notice everytime you sell a particular item in your webshop. Or when a new feature is being used. Please comment if you have any good ideas.</p><h3>Conclusion</h3><p>Slack is an excellent way to centralize errors easily. If you already have a company workspace in Slack, it is easy to start logging your errors to private channels.</p><p>When your application grows, you can consider moving to more advanced error tracking tools like <a href=\"https://sentry.io/for/javascript/\">Sentry</a>, <a href=\"https://trackjs.com/\">TrackJS</a>, etc.</p><p>The example code is on <a href=\"https://github.com/melcor76/slack-error-log\">Github</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZrJKJqBsksWd-8uKM9OvgA.png\" /></figure><h4>Call to Action</h4><p>I always enjoy feedback so please 👏 and 📝.<br>Follow me on <a href=\"https://twitter.com/melcor76\">Twitter</a> and <a href=\"https://medium.com/@michael.karen\">Medium</a> for blog updates.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=dc552e30506f\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/dailyjs/how-to-send-errors-into-slack-dc552e30506f\">How to send Errors into Slack</a> was originally published in <a href=\"https://medium.com/dailyjs\">DailyJS</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
        }
      ]
    }
  }
}